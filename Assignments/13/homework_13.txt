1) what is the similarities and differences between k-nearest neighbors, logistic regression, and neural networks?

2) what is the "XOR problem" for classification models, and give an example from real life that is not one of the
    examples I gave in class.

3) how does the XOR problem relate to our animals dataset? Can you find an example of the XOR problem using our features?

4) how do neural networks solve the XOR problem, allowing us to learn complicated interactions?

5) if you run the neural network model in run.py using the same settings (learning rate, weight init, num_epochs), the
performance is different each time. Why is this? What are the two different things that change each time you run the
model.

6) run the program run.py on the animals dataset with hidden_size = 1 for 2000 epochs.
    By manipulating the other parameters (learning rate, weight_stdev, training_proportion), what is the best you can
    get the model to perform?
    What does it mean to have hidden size = 1? Why is this network not all that good at the animal task, no matter
    what the other settings are?

7) leave training proportion set to 0.75. how many hidden units do you need to add to get the neural network to perform
perfectly on the test items? what other settings (learning rate, weight_stdev) did you use?
how consistent was it achieving 100% test accuracy?

8) make a matplotlib figure that has two subplots comparing the performance of two different models, run using different
settings, and averaging over 20 runs of each model. you should base your code on the code in the plot_performance()
function, with each subplot showing test performance for the different parameter settings. make sure the plot is fully
labeled. extra credit if your lines have shaded regions demonstrating the error bars, as shown here:
https://stackoverflow.com/questions/12957582/plot-yerr-xerr-as-shaded-region-rather-than-error-bars